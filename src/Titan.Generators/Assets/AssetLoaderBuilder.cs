using System.Text;
using Microsoft.CodeAnalysis;

namespace Titan.Generators.Assets;

internal static class AssetLoaderBuilder
{
    public static string Build(in AssetLoaderType assetLoader)
    {
        var loader = assetLoader.LoaderSymbol;
        var asset = assetLoader.AssetSymbol;

        var builder = new FormattedBuilder(new StringBuilder());

        builder
            .AppendAutoGenerated()
            .AppendLine()
            .AppendLine($"namespace {loader.ContainingNamespace.ToDisplayString()};")
            .AppendLine()
            .AppendLine($"{loader.DeclaredAccessibility.AsString()} unsafe partial struct {loader.Name} : {TitanTypes.IAssetLoader}<{asset.ToDisplayString()}>")
            .AppendOpenBracer();

        AddCreateDescriptor(builder, loader, asset);
        AddLoaderStub(builder, loader, asset);

        builder
            .AppendCloseBracer();

        return builder.ToString();

        static void AddCreateDescriptor(FormattedBuilder builder, INamedTypeSymbol loader, INamedTypeSymbol asset)
        {

            builder
                .AppendLine($"public static {TitanTypes.AssetLoaderDescriptor} CreateDescriptor()")
                .BeginIndentation()
                .AppendLine("=> new(")
                .BeginIndentation()
                .AppendLine($"(uint)sizeof({loader.Name}),")
                .AppendLine($"{TitanTypes.StringRef}.Create(nameof({loader.Name})),")
                .AppendLine($"(uint){asset.ToDisplayString()}.Type,")
                .AppendLine("&LoaderStub.Load,")
                .AppendLine("&LoaderStub.Unload,")
                .AppendLine("&LoaderStub.Init,")
                .AppendLine("&LoaderStub.Shutdown")
                .EndIndentation()
                .AppendLine(");")
                .EndIndentation()
                .AppendLine();
        }


        static void AddLoaderStub(FormattedBuilder builder, INamedTypeSymbol type, INamedTypeSymbol asset)
        {
            builder
                .AppendLine("private struct LoaderStub")
                .AppendOpenBracer()

                .AppendLine($"public static bool Init(void* context, in {TitanTypes.AssetLoaderInitializer} init)")
                .BeginIndentation()
                .AppendLine($"=> (({type.Name}*)context)->Init(init);")
                .EndIndentation()
                .AppendLine()

                .AppendLine("public static void Shutdown(void* context)")
                .BeginIndentation()
                .AppendLine($"=> (({type.Name}*)context)->Shutdown();")
                .EndIndentation()
                .AppendLine()

                .AppendLine($"public static void* Load(void* context, in {TitanTypes.AssetDescriptor} descriptor, {TitanTypes.TitanBuffer} buffer)")
                .BeginIndentation()
                .AppendLine($"=> (({type.Name}*)context)->Load(descriptor, buffer);")
                .EndIndentation()
                .AppendLine()

                .AppendLine($"public static void Unload(void* context, void* asset)")
                .BeginIndentation()
                .AppendLine($"=> (({type.Name}*)context)->Unload(({asset.Name}*)asset);")
                .EndIndentation()
                .AppendLine()

                .AppendCloseBracer()
                ;
        }
    }
}

