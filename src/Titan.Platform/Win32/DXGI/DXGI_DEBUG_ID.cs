using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Titan.Platform.Win32.DXGI;

public static unsafe class DXGI_DEBUG_ID
{
    public static Guid* IID_DXGI_DEBUG_ALL => AsPointer([0x83, 0xE2, 0x8A, 0xE4, 0x80, 0xDA, 0x0B, 0x49, 0x87, 0xE6, 0x43, 0xE9, 0xA9, 0xCF, 0xDA, 0x08]);
    public static Guid* IID_DXGI_DEBUG_DX => AsPointer([0xFC, 0xD7, 0xCD, 0x35, 0xB2, 0x13, 0x1D, 0x42, 0xA5, 0xD7, 0x7E, 0x44, 0x51, 0x28, 0x7D, 0x64]);
    public static Guid* IID_DXGI_DEBUG_DXGI => AsPointer([0xA4, 0xDA, 0xCD, 0x25, 0xC6, 0xB1, 0xE1, 0x47, 0xAC, 0x3E, 0x98, 0x87, 0x5B, 0x5A, 0x2E, 0x2A]);
    public static Guid* IID_DXGI_DEBUG_APP => AsPointer([0x01, 0xD6, 0xCD, 0x06, 0x19, 0x42, 0xBD, 0x4E, 0x87, 0x09, 0x27, 0xED, 0x23, 0x36, 0x0C, 0x62]);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static Guid* AsPointer(in ReadOnlySpan<byte> data)
    {
        Debug.Assert(data.Length == sizeof(Guid));
        return (Guid*)Unsafe.AsPointer(ref Unsafe.As<byte, Guid>(ref MemoryMarshal.GetReference(data)));
    }
}
