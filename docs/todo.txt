
## Error Handling (rework current approach)
    [ ] Rework error handling in Init code to Assert and terminate the application. These are all "fatal" and we can not recover from them.
    [ ] Add asserts to interna engine functions, with context (caller?). It's unlikely that we can recover from a failure anyway, detect, log and crash to avoid corruption in memory.
    [ ] Non engine code should ASSUME everything works. For example allocating a GPU buffer should not require the caller to check if its valid or not. Let the internals crash the game if it fails.
        - The idea behind this is to reduce error checking code and increase throughput of writing code. Also reduces the amount of code in the game. 

# Builds/compilation
    Read about these, can they do anything for performance or binary size?
    [ ] <IlcInvariantGlobalization>true</IlcInvariantGlobalization>
    [ ] <IlcDisableReflection>true</IlcDisableReflection>
    [ ] <IlcOptimizationPreference>Size</IlcOptimizationPreference>

# Windowing
    [X] Implement hide cursor
    [X] Implement lock cursor in place during hidden cursor. Should return to original spot when not hidden anymore.
        [X] Add external function to detect this, so UI doesn't trigger hover effects for example.
    [ ] Add bounds check for mouse clicks
    [X] Lock mouse inside screen (config)

# Input
    [X] Clear keystate on LostFocus

    The current input system is tightly coupled to key presses. IsKeyDown etc. This is fine as a low level system, but if we ever want to have something that switches between "modes" this will be very hard to achieve in game code.
    One example could be during dev, we want to use the development free look camera to freely look at the world. We'd need to check "is in free look mode" in game code to prevent keys from being recorded. 
    [ ] Implement a base for the Input System where we can set actions that reacts on different key combinations. 
    [ ] Disable this system when in Editor/Developer Mode.


# UI 

## Architecture
    [ ] Bump allocators, used per call. Add a Begin/End to the UIManager that will get an allocator, and return it.
        - We do this so we can create things in parallel, and at the end we return the allocators. If systems are executed after eachother they will be able to use the same allocator. 
        - Slight risk of creating a lot of allocators that use a lot of memory. Might be able to have a top limit.
    [ ] Begin/End
        * Calling Begin creates an allocator, commands record what we want to do, and end will submit it to the UI system to be rendered.

## Text Rendering
    [ ] Figure out what kind of text we want to support. Would be nice to only support UTF-8 and a single color (no effects at this time).

## Layouts
    [ ] Add panels, similar to Stack and Horizontal panels in WPF. 

## Version 2 - The Rework
    [ ] Separate interaction from rendering
    [X] Render in same frame, interaction happens in next frame (similar to how it's done today)
    [X] Store a hiearchy state and sort before rendering, to support multiple threads building the UI.
    [-] Rework Mouse logic so we don't have to do calculations on every single element every frame. - Wont do unless it's a problem
    [ ] Support UI Scaling
    [ ] Decide what layout system to use, constraint, anchors etc.
    [ ] Text scaling
    [ ] Fit size to content. Automatic scaling of buttons when text is added
    [ ] Text Area with automatic line breaks

## 9-Patch Sprite
    [X] Implement a naive rendering and processing for 9-patch sprites
    [ ] Rework 9 patch to a more minimalistic structure, and reduce number of elements needed to be rendered.
    [ ] Implement a converter for processing so we can use the format  [left, top, right, bottom] instead of a json object.

## Improvements
    [ ] Add Font Scaling, right now the font is the same size as it's been printed to the spritesheet.
        [ ] SDF fonts, this is a stretch and a long term goal for crisp text.
        [ ] Look into MSDF fonts as well, might be harder to generate but will yield a better result
# Art/Debug UI
    [ ] Create a base set of debug UI controls that can easily be used to create menues etc for an in-game editor.
    [X] Implement pre-loaded designes/styles used in Debug mode

# Detect Hover
    [X] Add a way to detect if the cursor is within a UI element. This is to be able to prevent interaction with game world if the player clicks in the UI
        [ ] Does not work for items that have no ID.
        [ ] Implement "clickthrough" parameter

# Meshes
## Mesh Storage
    [ ] Implement a memory manager for meshes and their data
    [ ] Add a FreeList for free chunks of GPU memory
    [ ] Use different algorithms to support best fit or first fit
    [ ] Synchronize allocations/frees. (lock, spinlock, interlocked)
    [ ] Separate Static from Dynamic
        [ ] Should we have direct CPU access to dynamic, and use upload queue for static? or use upload queue for both
    [ ] Resource management (Constant buffers, vertex buffers and index buffers)
        [ ] Dynamic resources, these requires updates every frame :|
        [ ] Static resources, these are uploaded once

# Materials
    [X] Add Material support, initial version should just be dynamic. in other words, update every frame. Double buffered.
    [ ] Additional Improvements
        [ ] Static materials, uploaded at startup.
        [ ] Partial Updates for materials. Batch material updates and only upload the parts that changed.
        [ ] Shared buffer for everything, this requires using offsets between frames.

# Rendering
## Bugs
    [ ] D3D12 Crashes, most likely due to some resources not being processed correctly, or in parallel when it's not supposed to.
        [X] Figure out a way to get the D3D12 error/debug layer printed. (Similar to the messages in output window when debugger is attached)
        [ ] Swapchain fails, returns none 0 HRESULT. Does not happen when debugger is attached.
        [ ] CommandList.Close() fails. Does not happen when debugger is attached.

## Draw Indirect
    [X] Implement the DrawIndirect APIs.
    [ ] implement a Indirect Draw Command builder, similar to the root signature builder. 

## Resizing/Fullscreen ( sen TitanV1 for inspiration)
    [X] Add support for resizing and render pipeline re-creation
    [ ] Add support for Fullscreen (Alt-Enter)
    [X] Add support for Borderless Fullscreen

## Buffers
    [X] We're using Double buffering but treating it as single buffer, this causes flickering and other issues due to data being written when GPU is reading it. (Very visible in UI.)
        [X] Add double buffering for buffers that are updated each frame
        
## Lighting
    [ ] Use DrawIndexedInstanced to group lights into a single draw call
    [ ] Use staging/per frame buffers for active lights


## D3D12 Resources
    [ ] We're using ComittedResource today, should we stick with that since we only allocate a single resource for meshes?

# Asset Processor
The asset processor is currently just a command line tool that will walk through all assets in a folder and put them into a single binary, based on some configuration in the metadata files.   
The long term goal is to have a hot reload system, that can detect changes and create reloadable files that the engine can consume in debug builds. 

# Hot Reload

## Asset Processor
    [X] Rework compilation step into multiple steps.
        [X] Create and validate metadata files.
        [X] Process assets and create AssetDescriptors
        [X] Write assets in the format engine can consume to a binary folder
        [X] For release builds, combine all these into a single file (per registry)

## Engine Runtime
    [X] Load data from files intead of combined registry when HotReload is enabled(only possible in debug builds)
    [X] Implement support for "polling" files for changes. (Using a FileWatcher that is removed for Release builds)
    [X] Reload assets, load a new one and swap with old.
    [ ] Implement hot reload for all/most loaders. or the ones that make sense.
    [ ] Add support for updated descriptors. Make sure its thread safe.
        - This is to support changing coordinates in a sprite sheet for example. 


# Editor

## Widgets
    [ ] Add widget for Lights and other Entities, render them as squares in window space.

## Debug Draw
    [X] Simple Line drawing
    [ ] Add a DebugDrawer class that we can use to draw different things like AABB, lines, spheres etc.